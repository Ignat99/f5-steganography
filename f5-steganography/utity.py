#!/usr/bin/env python
# coding: utf-8


# Символы Юникод

import Image
from jpeg_encoder import JpegEncoder
import sys
import os
from jpeg_extract import JpegExtract
import StringIO
import optparse
import logging


# Autogenerated with DRAKON Editor 1.31

def __main__():
    #item 72
    parser = optparse.OptionParser(usage="Usage: %prog [options] [args]")
    group = optparse.OptionGroup(parser, 'Jpeg f5 steganography encoder and decoder')
    
    group.add_option('-t', '--type', type='string', default='e', help='e for encode or x for decode')
    group.add_option('-i', '--image', type='string', help='input image')
    group.add_option('-d', '--data', type='string', help='data to be embeded, only for encode')
    group.add_option('-o', '--output', type='string', help='output image name, only for encode')
    group.add_option('-p', '--password', type='string', default='abc123', help='password')
    group.add_option('-c', '--comment', type='string', default='written by fengji', help='comment to put in the image, only for encode')
    
    parser.add_option_group(group)
    parser.add_option('-q', '--quiet', action='store_true')
    parser.add_option('-v', '--verbose', action='store_true')
    
    options, args = parser.parse_args()
    #item 73
    if __name__ == '__main__':
        #item 76
        logging.basicConfig(format='%(asctime)-15s [%(name)-9s] %(message)s', level=options.quiet and logging.ERROR or options.verbose and logging.DEBUG or logging.INFO)
    else:
        pass
    #item 77
    if options.image and os.path.isfile(options.image):
        #item 81
        if options.type == 'e' and options.data:
            #item 84
            image = Image.open(options.image)
            data = options.data
            #item 85
            if not data:
                #item 88
                print 'there\'s no data to embed'
                sys.exit(0)
            else:
                pass
            #item 89
            if not options.output:
                #item 92
                print 'you didn\'t specify the output jpeg file, if will be default output.jpg'
                options.output = 'output.jpg'
            else:
                #item 93
                if os.path.exists(options.output) and os.path.isfile(options.output):
                    #item 96
                    print 'the output file exists, do you really want to override it?'
                    answer = raw_input('y/n: ')
                    #item 97
                    if answer != 'y':
                        #item 100
                        print 'exit'
                        sys.exit(0)
                    else:
                        pass
                else:
                    pass
            #item 101
            output = open(options.output, 'wb')
            encoder = JpegEncoder(image, 80, output, options.comment)
            encoder.compress(data, options.password)
            output.close()
        else:
            pass
        #item 102
        if options.type == 'x':
            #item 105
            if options.output:
                #item 108
                output = open(options.output, 'wb')
            else:
                #item 109
                output = StringIO.StringIO()
            #item 110
            image = open(options.image, 'rb')
            JpegExtract(output, options.password).extract(image.read())
            #item 111
            if not options.output:
                #item 114
                print output.getvalue()
            else:
                pass
            #item 115
            image.close()
            output.close()
        else:
            pass
    else:
        #item 80
        print 'you didn\'t give a image or the image is not there'
        parser.print_help()


